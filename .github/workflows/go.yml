name: Go

permissions:
  contents: write
  
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
env:
  PROJECT: luahelper-xy3
  BIN_NAME: luahelper-lsp

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: macos-11,       target: darwin,  platform: darwin-x64   }
          - { os: macos-11,       target: darwin,  platform: darwin-arm64 }
          - { os: windows-latest, target: windows, platform: win32-x64    }
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.container }}
    steps:
      - name: Prepare container
        if: ${{ matrix.target == 'linux' }}
        run: |
          apt-get update
          apt-get install -y software-properties-common
          add-apt-repository -y ppa:ubuntu-toolchain-r/test # For gcc-9 and g++-9
          add-apt-repository -y ppa:git-core/ppa # For git>=2.18.
          apt-get update
          apt-get install -y sudo git gcc-9 g++-9
      - name: Install aarch64-linux-gnu
        if: ${{ matrix.platform == 'linux-arm64' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: Build
        run: cd luahelper-lsp && go build -o ./ -v ./...

      #- name: Test
        #run: cd luahelper-lsp && go test -v ./...
        
      - name: Setting up workflow variables
        id: vars
        shell: bash
        run: |
          # Package version
          if [[ $GITHUB_REF = refs/tags/* ]]; then
            PKG_VERSION=${GITHUB_REF##*/}
          else
            PKG_VERSION=${GITHUB_SHA:0:7}
          fi
          # Package suffix relative to the platform
          if [[ "${{ matrix.target }}" = windows ]]; then
            PKG_SUFFIX="zip"
            BIN_NAME="${{ env.BIN_NAME }}.exe"
          else
            PKG_SUFFIX="tar.gz"
            BIN_NAME="${{ env.BIN_NAME }}"
          fi
          # Package name w/ version
          PKG_BASENAME="${{ env.PROJECT }}-${PKG_VERSION}-${{ matrix.platform }}"
          # Full name of the tarball asset
          PKG_NAME="${PKG_BASENAME}.${PKG_SUFFIX}"
          # Staging area for tarballs
          PKG_STAGING="ci_staging/$PKG_BASENAME"
          echo PKG_VERSION=${PKG_VERSION}             >> $GITHUB_OUTPUT
          echo PKG_BASENAME=${PKG_BASENAME}           >> $GITHUB_OUTPUT
          echo PKG_NAME=${PKG_NAME}                   >> $GITHUB_OUTPUT
          echo PKG_PATH="${PKG_STAGING}/${PKG_NAME}"  >> $GITHUB_OUTPUT
          echo PKG_STAGING=${PKG_STAGING}             >> $GITHUB_OUTPUT
          echo BIN_PATH="luahelper-lsp/${BIN_NAME}"     >> $GITHUB_OUTPUT
    
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.vars.outputs.PKG_BASENAME }}
          path: |
            ${{ steps.vars.outputs.BIN_PATH }}
            README.MD
            CONTRIBUTING.md
            LICENSE
            CHANGELOG
            luahelper-vscode/server
      
      - name: Package tarballs
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          STAGING=${{ steps.vars.outputs.PKG_STAGING }}
          NAME=${{ steps.vars.outputs.PKG_NAME }}
          # Making the staging area
          mkdir -p ${STAGING}
          # Copying binary and runtime files to staging area
          cp README.MD CONTRIBUTING.md LICENSE CHANGELOG luahelper-vscode/server ${{ steps.vars.outputs.BIN_PATH }} ${STAGING}
          # Creating release assets
          pushd "${STAGING}/" >/dev/null
          if [[ "${{ matrix.target }}" = windows ]]; then
            7z -y a ${NAME} * | tail -2
          else
            tar czf ${NAME} *
          fi
          popd >/dev/null
          
      - name: Publish release assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          files: |
            ${{ steps.vars.outputs.PKG_PATH }}
